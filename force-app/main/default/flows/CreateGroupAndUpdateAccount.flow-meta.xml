<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>Update_Account_RelatedGroupId</name>
        <label>Update Account RelatedGroupId</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <actionName>AsyncUpdateAccountRelatedGroupAction</actionName>
        <actionType>apex</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>accountId</name>
            <value>
                <elementReference>accountrecord.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>groupId</name>
            <value>
                <elementReference>groupId</elementReference>
            </value>
        </inputParameters>
        <nameSegment>AsyncUpdateAccountRelatedGroupAction</nameSegment>
        <offset>0</offset>
    </actionCalls>
    <apiVersion>64.0</apiVersion>
    <assignments>
        <name>Assignment_GroupId_in_Variable</name>
        <label>Assignment GroupId in Variable</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>publicgroupId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Loop_on_Group_Records.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Loop_on_Group_Records</targetReference>
        </connector>
    </assignments>
    <decisions>
        <name>Decision_to_Check_Group_Exist_or_Not</name>
        <label>Decision to Check  Group Exist or Not</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>Update_Account_Records</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Group Already Exist</defaultConnectorLabel>
        <rules>
            <name>Is_Group_doesn_t_exist</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>publicgroupId</leftValueReference>
                <operator>IsBlank</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>publicgroupId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Create_Public_Group</targetReference>
            </connector>
            <label>Is Group doesn&apos;t exist?</label>
        </rules>
    </decisions>
    <decisions>
        <name>Decision_to_check_Group_Id</name>
        <label>Decision to check Group Id</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>Loop_on_Group_Records</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>GroupId Doesn&apos;t Exist</defaultConnectorLabel>
        <rules>
            <name>Is_GroupId_Exist</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Loop_on_Group_Records.Name</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>shortName</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Assignment_GroupId_in_Variable</targetReference>
            </connector>
            <label>Is GroupId already Exist?</label>
        </rules>
    </decisions>
    <description>Create Group and Update Account record.</description>
    <environments>Default</environments>
    <formulas>
        <name>CleanedGroupName</name>
        <dataType>String</dataType>
        <expression>&quot;GRP_&quot; &amp; 
SUBSTITUTE(
  SUBSTITUTE(
    SUBSTITUTE(LEFT({!shortName}, 40), &quot; &quot;, &quot;_&quot;),
    &quot;-&quot;, &quot;_&quot;
  ),
  &quot;__&quot;, &quot;_&quot;
)</expression>
    </formulas>
    <interviewLabel>CreateGroupAndUpdateAccount {!$Flow.CurrentDateTime}</interviewLabel>
    <label>CreateGroupAndUpdateAccount</label>
    <loops>
        <name>Loop_on_Group_Records</name>
        <label>Loop on Group Records</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>Get_Group</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>Decision_to_check_Group_Id</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>Decision_to_Check_Group_Exist_or_Not</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <name>Create_Public_Group</name>
        <label>Create Public Group</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignRecordIdToReference>groupId</assignRecordIdToReference>
        <connector>
            <targetReference>Update_Account_RelatedGroupId</targetReference>
        </connector>
        <inputAssignments>
            <field>DeveloperName</field>
            <value>
                <elementReference>CleanedGroupName</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Name</field>
            <value>
                <elementReference>shortName</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Type</field>
            <value>
                <stringValue>Regular</stringValue>
            </value>
        </inputAssignments>
        <object>Group</object>
    </recordCreates>
    <recordLookups>
        <name>Get_Group</name>
        <label>Get Group</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Loop_on_Group_Records</targetReference>
        </connector>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>Update_Account_Records</name>
        <label>Update Account Records</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>accountrecord.Id</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>RelatedGroupId__c</field>
            <value>
                <elementReference>publicgroupId</elementReference>
            </value>
        </inputAssignments>
        <object>Account</object>
    </recordUpdates>
    <start>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Get_Group</targetReference>
        </connector>
    </start>
    <status>Obsolete</status>
    <variables>
        <name>accountrecord</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <objectType>Account</objectType>
    </variables>
    <variables>
        <name>Error</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <stringValue>A public group with the same name already exists. Please change the Account Name to avoid duplication.</stringValue>
        </value>
    </variables>
    <variables>
        <name>groupId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>groupIds</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>publicgroupId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>shortName</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
